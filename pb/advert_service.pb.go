// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.4
// source: advert_service.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_advert_service_proto protoreflect.FileDescriptor

var file_advert_service_proto_rawDesc = []byte{
	0x0a, 0x14, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x1a, 0x14, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x32, 0xcb, 0x03, 0x0a, 0x0d, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x6d,
	0x6f, 0x72, 0x70, 0x68, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x2e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x56, 0x0a, 0x04, 0x52, 0x65,
	0x61, 0x64, 0x12, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x19, 0x2e,
	0x6d, 0x6f, 0x72, 0x70, 0x68, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x2e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12,
	0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x53, 0x0a, 0x07, 0x52, 0x65, 0x61, 0x64, 0x41, 0x6c, 0x6c, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x73, 0x30, 0x01, 0x12, 0x5b, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x1a, 0x19, 0x2e, 0x6d,
	0x6f, 0x72, 0x70, 0x68, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x2e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x32,
	0x10, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x58, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x19,
	0x2e, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x2e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x70,
	0x68, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x2a, 0x10, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0x0d,
	0x5a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_advert_service_proto_goTypes = []interface{}{
	(*Advert)(nil),      // 0: morphcloud.advert.Advert
	(*Filter)(nil),      // 1: morphcloud.advert.Filter
	(*empty.Empty)(nil), // 2: google.protobuf.Empty
}
var file_advert_service_proto_depIdxs = []int32{
	0, // 0: morphcloud.advert.AdvertService.Create:input_type -> morphcloud.advert.Advert
	1, // 1: morphcloud.advert.AdvertService.Read:input_type -> morphcloud.advert.Filter
	2, // 2: morphcloud.advert.AdvertService.ReadAll:input_type -> google.protobuf.Empty
	0, // 3: morphcloud.advert.AdvertService.Update:input_type -> morphcloud.advert.Advert
	0, // 4: morphcloud.advert.AdvertService.Delete:input_type -> morphcloud.advert.Advert
	0, // 5: morphcloud.advert.AdvertService.Create:output_type -> morphcloud.advert.Advert
	0, // 6: morphcloud.advert.AdvertService.Read:output_type -> morphcloud.advert.Advert
	0, // 7: morphcloud.advert.AdvertService.ReadAll:output_type -> morphcloud.advert.Advert
	0, // 8: morphcloud.advert.AdvertService.Update:output_type -> morphcloud.advert.Advert
	0, // 9: morphcloud.advert.AdvertService.Delete:output_type -> morphcloud.advert.Advert
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_advert_service_proto_init() }
func file_advert_service_proto_init() {
	if File_advert_service_proto != nil {
		return
	}
	file_advert_message_proto_init()
	file_filter_message_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_advert_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_advert_service_proto_goTypes,
		DependencyIndexes: file_advert_service_proto_depIdxs,
	}.Build()
	File_advert_service_proto = out.File
	file_advert_service_proto_rawDesc = nil
	file_advert_service_proto_goTypes = nil
	file_advert_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AdvertServiceClient is the client API for AdvertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdvertServiceClient interface {
	Create(ctx context.Context, in *Advert, opts ...grpc.CallOption) (*Advert, error)
	Read(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Advert, error)
	ReadAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (AdvertService_ReadAllClient, error)
	Update(ctx context.Context, in *Advert, opts ...grpc.CallOption) (*Advert, error)
	Delete(ctx context.Context, in *Advert, opts ...grpc.CallOption) (*Advert, error)
}

type advertServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdvertServiceClient(cc grpc.ClientConnInterface) AdvertServiceClient {
	return &advertServiceClient{cc}
}

func (c *advertServiceClient) Create(ctx context.Context, in *Advert, opts ...grpc.CallOption) (*Advert, error) {
	out := new(Advert)
	err := c.cc.Invoke(ctx, "/morphcloud.advert.AdvertService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advertServiceClient) Read(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Advert, error) {
	out := new(Advert)
	err := c.cc.Invoke(ctx, "/morphcloud.advert.AdvertService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advertServiceClient) ReadAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (AdvertService_ReadAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AdvertService_serviceDesc.Streams[0], "/morphcloud.advert.AdvertService/ReadAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &advertServiceReadAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AdvertService_ReadAllClient interface {
	Recv() (*Advert, error)
	grpc.ClientStream
}

type advertServiceReadAllClient struct {
	grpc.ClientStream
}

func (x *advertServiceReadAllClient) Recv() (*Advert, error) {
	m := new(Advert)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *advertServiceClient) Update(ctx context.Context, in *Advert, opts ...grpc.CallOption) (*Advert, error) {
	out := new(Advert)
	err := c.cc.Invoke(ctx, "/morphcloud.advert.AdvertService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advertServiceClient) Delete(ctx context.Context, in *Advert, opts ...grpc.CallOption) (*Advert, error) {
	out := new(Advert)
	err := c.cc.Invoke(ctx, "/morphcloud.advert.AdvertService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdvertServiceServer is the server API for AdvertService service.
type AdvertServiceServer interface {
	Create(context.Context, *Advert) (*Advert, error)
	Read(context.Context, *Filter) (*Advert, error)
	ReadAll(*empty.Empty, AdvertService_ReadAllServer) error
	Update(context.Context, *Advert) (*Advert, error)
	Delete(context.Context, *Advert) (*Advert, error)
}

// UnimplementedAdvertServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAdvertServiceServer struct {
}

func (*UnimplementedAdvertServiceServer) Create(context.Context, *Advert) (*Advert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedAdvertServiceServer) Read(context.Context, *Filter) (*Advert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedAdvertServiceServer) ReadAll(*empty.Empty, AdvertService_ReadAllServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadAll not implemented")
}
func (*UnimplementedAdvertServiceServer) Update(context.Context, *Advert) (*Advert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedAdvertServiceServer) Delete(context.Context, *Advert) (*Advert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterAdvertServiceServer(s *grpc.Server, srv AdvertServiceServer) {
	s.RegisterService(&_AdvertService_serviceDesc, srv)
}

func _AdvertService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Advert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/morphcloud.advert.AdvertService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertServiceServer).Create(ctx, req.(*Advert))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvertService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/morphcloud.advert.AdvertService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertServiceServer).Read(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvertService_ReadAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdvertServiceServer).ReadAll(m, &advertServiceReadAllServer{stream})
}

type AdvertService_ReadAllServer interface {
	Send(*Advert) error
	grpc.ServerStream
}

type advertServiceReadAllServer struct {
	grpc.ServerStream
}

func (x *advertServiceReadAllServer) Send(m *Advert) error {
	return x.ServerStream.SendMsg(m)
}

func _AdvertService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Advert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/morphcloud.advert.AdvertService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertServiceServer).Update(ctx, req.(*Advert))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvertService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Advert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/morphcloud.advert.AdvertService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertServiceServer).Delete(ctx, req.(*Advert))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdvertService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "morphcloud.advert.AdvertService",
	HandlerType: (*AdvertServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AdvertService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _AdvertService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AdvertService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AdvertService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadAll",
			Handler:       _AdvertService_ReadAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "advert_service.proto",
}
